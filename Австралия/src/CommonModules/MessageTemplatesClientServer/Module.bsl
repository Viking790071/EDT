///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, 1C-Soft LLC
// All Rights reserved. This application and supporting materials are provided under the terms of 
// Attribution 4.0 International license (CC BY 4.0)
// The license text is available at:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Region Public

// Describes a template parameter for their use in external data processors.
//
// Parameters:
//  ParametersTable           - ValueTable - a table with parameters.
//  ParameterName                - String - a name of the used parameter.
//  TypeDetails                - TypesDetails - a parameter type.
//  IsPredefinedParameter - Boolean - if False, this is an arbitrary parameter, otherwise, a main parameter.
//  ParameterPresentation      - String - a parameter presentation to be displayed.
//
Procedure AddTemplateParameter(ParametersTable, ParameterName, TypeDetails, IsPredefinedParameter, ParameterPresentation = "") Export

	NewRow                             = ParametersTable.Add();
	NewRow.ParameterName                = ParameterName;
	NewRow.TypeDetails                = TypeDetails;
	NewRow.IsPredefinedParameter = IsPredefinedParameter;
	NewRow.ParameterPresentation      = ?(IsBlankString(ParameterPresentation),ParameterName, ParameterPresentation);
	
EndProcedure

// Initializes the message structure that has to be returned by the external data processor from the template.
//
// Returns:
//   Structure - a created structure.
//
Function InitializeMessageStructure() Export
	
	MessageStructure = New Structure;
	MessageStructure.Insert("SMSMessageText", "");
	MessageStructure.Insert("EmailSubject", "");
	MessageStructure.Insert("EmailText", "");
	MessageStructure.Insert("AttachmentsStructure", New Structure);
	MessageStructure.Insert("HTMLEmailText", "<HTML></HTML>");
	
	Return MessageStructure;
	
EndFunction

// Initializes the Recipients structure to fill in possible message recipients.
//
// Returns:
//   Structure - a created structure.
//
Function InitializeRecipientsStructure() Export
	
	Return New Structure("Recipient", New Array);
	
EndFunction

// Template parameter constructor.
//
// Returns:
//  Structure - a list of template parameters, where:
//   * Subject - String - a subject of templates (for emails).
//   * Text - String - a template text.
//   * SignatureAndSeal - Boolean - indicates whether there is a signature and a seal in print forms.
//   * MessageParameters - Structure - additional message parameters.
//   * Description - String - a message template description.
//   * Ref - Undefined - a reference to a catalog item.
//   * TemplateOwner - Undefined -  a context template owner.
//   * DCSParameters - Map - a parameter set on receiving data using DCS.
//   * Parameters - Map - template parameters.
//   * Template - String - a DCS template name.
//   * SelectedAttachments - Map - selected print forms and attachments for the template.
//   * AttachmentsFormats - ValueList - a format in which print forms are saved.
//   * ExpandRefAttributes - Boolean - if True, reference attributes have their attributes available.
//   * TemplateByExternalDataProcessor - Boolean - if True, a template is generated by an external data processor.
//   * ExternalDataProcessor - Undefined - an external data processor reference.
//   * Sender - String - a sender email.
//   * Transliterate - Boolean - if True, the names of report files will contain only Latin letters 
//                                   and digits. This ensures compatibility between different 
//                                   operating systems. For example, file Счет на оплату.pdf
//                                   will be saved as Schet na oplaty.pdf.
//   * CompressToArchive - Boolean - indicates whether attachements and print forms are to be 
//                                archived upon sending. 
//   * EmailFormat - EnumRef.EmailEditingMethods - an email text kind: HTML or PlainText.
//   * FullAssignmentTypeName - String - a full name of the metadata object based on which a message is created.
//   * Assignment - String - a message template assignment.
//   * TemplateType - String - the options are Email or SMSMessage.
//
Function TemplateParametersDetails() Export
	Result = New Structure;
	
	Result.Insert("Text", "");
	Result.Insert("Subject", "");
	Result.Insert("TemplateType", "Email");
	Result.Insert("Purpose", "");
	Result.Insert("FullAssignmentTypeName", "");
	Result.Insert("EmailFormat", PredefinedValue("Enum.EmailEditingMethods.HTML"));
	Result.Insert("PackToArchive", False);
	Result.Insert("TransliterateFileNames", False);
	Result.Insert("Transliterate", False);
	Result.Insert("Sender", "");
	Result.Insert("ExternalDataProcessor", Undefined);
	Result.Insert("TemplateByExternalDataProcessor", False);
	Result.Insert("ExpandRefAttributes", True);
	Result.Insert("AttachmentsFormats", New ValueList);
	Result.Insert("SelectedAttachments", New Map);
	Result.Insert("Template", "");
	Result.Insert("Parameters", New Map);
	Result.Insert("DCSParameters", New Map);
	Result.Insert("TemplateOwner", Undefined);
	Result.Insert("Ref", Undefined);
	Result.Insert("Description", "");
	Result.Insert("MessageParameters", New Structure);
	Result.Insert("SignatureAndSeal", False);
	
	Return Result;
	
EndFunction

#EndRegion

#Region Private

Function CommonID() Export
	Return "Common";
EndFunction

Function CommonIDPresentation() Export
	Return NStr("ru = 'Общий'; en = 'Common'; pl = 'Wspólny';es_ES = 'Común';es_CO = 'Común';tr = 'Genel';it = 'Comune';de = 'Allgemein'");
EndFunction

Function SendOptionsConstructor(Template, Topic, UUID) Export
	
	SendOptions = New Structure();
	SendOptions.Insert("Template", Template);
	SendOptions.Insert("Topic", Topic);
	SendOptions.Insert("UUID", UUID);
	SendOptions.Insert("AdditionalParameters", New Structure);
	SendOptions.AdditionalParameters.Insert("ConvertHTMLForFormattedDocument", False);
	SendOptions.AdditionalParameters.Insert("MessageKind", "");
	SendOptions.AdditionalParameters.Insert("ArbitraryParameters", New Map);
	SendOptions.AdditionalParameters.Insert("SendImmediately", False);
	SendOptions.AdditionalParameters.Insert("MessageParameters", New Structure);
	SendOptions.AdditionalParameters.Insert("Account", Undefined);
	SendOptions.AdditionalParameters.Insert("PrintForms", New Array);
	SendOptions.AdditionalParameters.Insert("SettingsForSaving");
	
	Return SendOptions;
	
EndFunction

Function ArbitraryParametersTitle() Export
	Return NStr("ru = 'Пользовательский'; en = 'Custom'; pl = 'Wariant użytkownika';es_ES = 'De usuario';es_CO = 'De usuario';tr = 'Özel';it = 'Personalizzato';de = 'Benutzerdefiniert'");
EndFunction

// Handler of the subscription to FormGetProcessing event for overriding file form.
//
// Parameters:
//  Source                 - CatalogManager - the *AttachedFiles catalog manager.
//  FormKind                 - String - a standard form name.
//  Parameters                - Structure - form parameters.
//  SelectedForm           - String - a name or metadata object of the form to open.
//  AdditionalInformation - Structure - additional information of the form opening.
//  StandardProcessing     - Boolean - indicates whether standard (system) event processing is executed.
//
Procedure DetermineAttachedFileForm(Source, FormKind, Parameters,
				SelectedForm, AdditionalInformation, StandardProcessing) Export
				
	#If Server Or ThickClientOrdinaryApplication Or ExternalConnection Then

	If Common.SubsystemExists("StandardSubsystems.FilesOperations") Then
		
		ModuleStoredFilesInternalServerCall = Common.CommonModule("FilesOperationsInternalServerCall");
		ModuleStoredFilesInternalServerCall.DetermineAttachedFileForm(Source, FormKind, Parameters,
				SelectedForm, AdditionalInformation, StandardProcessing);
		
	EndIf;
		
	#Else
		
	If CommonClient.SubsystemExists("StandardSubsystems.FilesOperations") Then
		
		ModuleStoredFilesInternalServerCall = CommonClient.CommonModule("FilesOperationsInternalServerCall");
		ModuleStoredFilesInternalServerCall.DetermineAttachedFileForm(Source, FormKind, Parameters,
				SelectedForm, AdditionalInformation, StandardProcessing);
		
	EndIf;
			
	#EndIf
	
EndProcedure

#EndRegion
