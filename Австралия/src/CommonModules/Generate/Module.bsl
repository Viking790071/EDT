///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, 1C-Soft LLC
// All Rights reserved. This application and supporting materials are provided under the terms of 
// Attribution 4.0 International license (CC BY 4.0)
// The license text is available at:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Region Public

// Adds a command of creation of the specified object to the list of commands of creation on basis.
//
// Parameters:
//  GenerationCommands - ValueTable - see GenerationOverridable.BeforeAddGenerationCommands. 
//  MetadataObject - MetadataObject - an object, for which the command is being added.
// 
// Returns:
//  ValueTableRow, Undefined - details of the added command.
//
Function AddGenerationCommand(GenerationCommands, MetadataObject) Export
	If AccessRight("Insert", MetadataObject) Then
		CreateBasedOnCommand = GenerationCommands.Add();
		CreateBasedOnCommand.Manager = MetadataObject.FullName();
		CreateBasedOnCommand.Presentation = Common.ObjectPresentation(MetadataObject);
		CreateBasedOnCommand.WriteMode = "Write";
		
		Return CreateBasedOnCommand;
	EndIf;
	
	Return Undefined;
EndFunction

#EndRegion

#Region Internal

////////////////////////////////////////////////////////////////////////////////
// Configuration subsystems event handlers.

// See AttachableCommandsOverridable.OnDefineAttachableObjectsSettingsComposition. 
Procedure OnDefineAttachableObjectsSettingsComposition(InterfaceSettings) Export
	Setting = InterfaceSettings.Add();
	Setting.Key          = "AddGenerationCommands";
	Setting.TypeDescription = New TypeDescription("Boolean");
EndProcedure

// See AttachableCommandsOverridable.OnDefineAttachableCommandsKinds. 
Procedure OnDetermineConnectedCommandKinds(AttachableCommandsKinds) Export
	
	If Not SubsystemSettings().UseInputBasedOnCommands Then
		Return;
	EndIf;
	
	Kind = AttachableCommandsKinds.Add();
	Kind.Name         = "Generation";
	Kind.SubmenuName  = "CreateBasedOnSubmenu";
	Kind.Title   = NStr("ru = 'Создать на основании';
							|en = 'Create on the basis'; pl = 'Utwórz na podstawie';es_ES = 'Crear en la base';es_CO = 'Crear en la base';tr = 'Esasında oluştur';it = 'Creare in base';de = 'Auf der Grundlage erstellen'");
	Kind.Order     = 60;
	Kind.Picture    = PictureLib.InputOnBasis;
	Kind.Representation = ButtonRepresentation.Picture;
	
EndProcedure

#EndRegion

#Region Private

// List of objects that use commands of creation on basis.
//
// Returns:
//   Array of String - names of metadata objects attached to the subsystem.
//
Function ObjectsWithCreationBasedOnCommands()
	
	Return New Map(GenerateObjectsCached.ObjectsWithCreationBasedOnCommands());
	
EndFunction

Function SubsystemSettings()
	
	Settings = New Structure;
	Settings.Insert("UseInputBasedOnCommands", True);
	
	GenerationOverridable.OnDefineSettings(Settings);
	
	Return Settings;
	
EndFunction

Procedure OnOutputCommands(Form, CommandsKind, SubmenuInfoByDefault, PlacementParameters) Export
	
	If CommandsKind.Name <> "Generation" Then
		Return;
	EndIf;
		
	If PlacementParameters.InputOnBasisUsingAttachableCommands Then
		HideStandardInputBasedOnSubmenu(Form, SubmenuInfoByDefault);
	EndIf;
	
EndProcedure

Procedure HideStandardInputBasedOnSubmenu(Form, DynamicCreationBasedOnSubmenu)
	
	CreateBasedOnSubmenu = Form.Items.Find("FormGenerateObject");
	If CreateBasedOnSubmenu = Undefined Then
		Return;
	EndIf;
	
	CreateBasedOnSubmenu.Visible = False;
	
	AutoGeneratedCommandsNames = New Map;
	For Each Item In ObjectsWithCreationBasedOnCommands() Do
		AutoGeneratedCommandsNames.Insert("Form" + StrReplace(Item.Key, ".", "") + "CreateBasedOn", True);
	EndDo;
		
	For Each Item In CreateBasedOnSubmenu.ChildItems Do
		If AutoGeneratedCommandsNames[Item.Name] = Undefined Then
			Form.Items.Move(Item, DynamicCreationBasedOnSubmenu.Folders.Ordinary);
			DynamicCreationBasedOnSubmenu.CommandsShown = DynamicCreationBasedOnSubmenu.CommandsShown + 1;
		EndIf;
	EndDo;
	
EndProcedure

Function ObjectsAttachedToSubsystem(Types) Export
	
	ObjectsWithCreationBasedOnCommands = ObjectsWithCreationBasedOnCommands();

	For Each Type In Types Do
		MetadataObject = Metadata.FindByType(Type);
		If ObjectsWithCreationBasedOnCommands[MetadataObject.FullName()] = Undefined Then
			Return False;
		EndIf;
	EndDo;
	
	Return True;
	
EndFunction

#EndRegion
