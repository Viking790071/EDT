#If Server Or ThickClientOrdinaryApplication Or ExternalConnection Then

#Region Public

Procedure GenerateDocuments(Parameters, ResultAddress) Export
	
	ProductsTable = Parameters.ProductsTable;
	OrdersArray = Parameters.OrdersArray;
	CreateGoodsIssue = Parameters.CreateGoodsIssue;
	
	If Parameters.PostDocuments Then
		WriteMode = DocumentWriteMode.Posting;
	Else
		WriteMode = DocumentWriteMode.Write;
	EndIf;
	
	DocumentsArray = New Array;
	
	If OrdersArray.Count() > 0 Then
		
		If CreateGoodsIssue Then
			
			If OrdersArray.Count() = 1 Then
				
				CreateGoodsIssue(OrdersArray, ProductsTable, WriteMode, DocumentsArray);
				
			Else
				
				DataStructure = DriveServer.CheckOrdersAndInvoicesKeyAttributesForGoodsIssue(OrdersArray);
				If DataStructure.CreateMultipleInvoices Then
					
					For Each OrdersArrayGroup In DataStructure.OrdersGroups Do
						
						CreateGoodsIssue(OrdersArrayGroup, ProductsTable, WriteMode, DocumentsArray);
						
					EndDo;
					
				Else
					
					CreateGoodsIssue(OrdersArray, ProductsTable, WriteMode, DocumentsArray);
					
				EndIf;
				
			EndIf;
			
		Else
			
			If OrdersArray.Count() = 1 Then
				
				CreateSalesInvoice(OrdersArray, ProductsTable, WriteMode, DocumentsArray);
				
			Else
				
				DataStructure = DriveServer.CheckOrdersKeyAttributes(OrdersArray);
				If DataStructure.CreateMultipleInvoices Then
					
					For Each OrdersArrayGroup In DataStructure.OrdersGroups Do
						
						CreateSalesInvoice(OrdersArrayGroup, ProductsTable, WriteMode, DocumentsArray);
						
					EndDo;
					
				Else
					
					CreateSalesInvoice(OrdersArray, ProductsTable, WriteMode, DocumentsArray);
					
				EndIf;
				
			EndIf;
			
		EndIf;
		
	EndIf;
	
	Result = New Structure("DocumentsArray", DocumentsArray);
	
	PutToTempStorage(Result, ResultAddress);
	
EndProcedure

#EndRegion

#Region Private

Procedure CreateGoodsIssue(OrdersArray, ProductsTable, WriteMode, DocumentsArray)
	
	FillStructure = New Structure;
	FillStructure.Insert("ArrayOfSalesOrders", OrdersArray);
	FillStructure.Insert("OrderedProductsTable", ProductsTable);
	
	CurDate = CurrentSessionDate();
	
	GoodsIssueObject = Documents.GoodsIssue.CreateDocument();
	GoodsIssueObject.Date = CurDate;
	GoodsIssueObject.OperationType = Enums.OperationTypesGoodsIssue.SaleToCustomer;
	GoodsIssueObject.Comment = StringFunctionsClientServer.SubstituteParametersToString("%1 ""%2"" %3",
		NStr("en = 'Automatically generated by the'; ru = 'Автоматически сформирован';pl = 'Automatycznie generowane przez';es_ES = 'Generado automáticamente por';es_CO = 'Generado automáticamente por';tr = 'tarafından otomatik olarak oluşturuldu';it = 'Generato automaticamente da';de = 'Automatisch generiert von'"),
		Metadata.DataProcessors.GoodsDispatching.Synonym,
		Format(CurDate, "DLF=D"));
	
	GoodsIssueObject.Filling(FillStructure, Undefined, True);
	
	Try
		GoodsIssueObject.Write(DocumentWriteMode.Write);
		DocumentsArray.Add(GoodsIssueObject.Ref);
		If WriteMode = DocumentWriteMode.Posting Then
			GoodsIssueObject.Write(WriteMode);
		EndIf;
	Except
		
		If WriteMode = DocumentWriteMode.Write Then
			StringPattern = NStr("en = 'Cannot write the %1 document.'; ru = 'Не удалось записать документ %1.';pl = 'Nie można zapisać %1 dokumentu.';es_ES = 'No se puede guardar el %1 documento.';es_CO = 'No se puede guardar el %1 documento.';tr = '%1 belgesi yazılamıyor.';it = 'Impossibile scrivere il documento %1.';de = 'Kann das %1 Dokument nicht schreiben.'");
		Else
			StringPattern = NStr("en = 'Cannot post the %1 document.'; ru = 'Не удалось провести документ: %1.';pl = 'Nie można zaksięgować %1 dokumentu.';es_ES = 'No se puede enviar el %1 documento.';es_CO = 'No se puede enviar el %1 documento.';tr = '%1 belgesi kaydedilemiyor.';it = 'Non è possibile pubblicare il documento %1.';de = 'Fehler beim Buchen des Dokuments %1.'");
		EndIf;
		
		MessageText = StringFunctionsClientServer.SubstituteParametersToString(
			StringPattern,
			String(GoodsIssueObject));
		
		CommonClientServer.MessageToUser(MessageText);
		
	EndTry;
	
EndProcedure

Procedure CreateSalesInvoice(OrdersArray, ProductsTable, WriteMode, DocumentsArray)
	
	FillStructure = New Structure;
	FillStructure.Insert("ArrayOfSalesOrders", OrdersArray);
	FillStructure.Insert("OrderedProductsTable", ProductsTable);
	
	CurDate = CurrentSessionDate();
	
	SalesInvoiceObject = Documents.SalesInvoice.CreateDocument();
	SalesInvoiceObject.Date = CurDate;
	SalesInvoiceObject.Comment = StringFunctionsClientServer.SubstituteParametersToString("%1 ""%2"" %3",
		NStr("en = 'Automatically generated by the'; ru = 'Автоматически сформирован';pl = 'Automatycznie generowane przez';es_ES = 'Generado automáticamente por';es_CO = 'Generado automáticamente por';tr = 'tarafından otomatik olarak oluşturuldu';it = 'Generato automaticamente da';de = 'Automatisch generiert von'"),
		Metadata.DataProcessors.GoodsDispatching.Synonym,
		Format(CurDate, "DLF=D"));
	
	SalesInvoiceObject.Filling(FillStructure, Undefined, True);
	
	Try
		SalesInvoiceObject.Write(DocumentWriteMode.Write);
		DocumentsArray.Add(SalesInvoiceObject.Ref);
		If WriteMode = DocumentWriteMode.Posting Then
			SalesInvoiceObject.Write(WriteMode);
		EndIf;
	Except
		
		If WriteMode = DocumentWriteMode.Write Then
			StringPattern = NStr("en = 'Cannot write the %1 document.'; ru = 'Не удалось записать документ %1.';pl = 'Nie można zapisać %1 dokumentu.';es_ES = 'No se puede guardar el %1 documento.';es_CO = 'No se puede guardar el %1 documento.';tr = '%1 belgesi yazılamıyor.';it = 'Impossibile scrivere il documento %1.';de = 'Kann das %1 Dokument nicht schreiben.'");
		Else
			StringPattern = NStr("en = 'Cannot post the %1 document.'; ru = 'Не удалось провести документ: %1.';pl = 'Nie można zaksięgować %1 dokumentu.';es_ES = 'No se puede enviar el %1 documento.';es_CO = 'No se puede enviar el %1 documento.';tr = '%1 belgesi kaydedilemiyor.';it = 'Non è possibile pubblicare il documento %1.';de = 'Fehler beim Buchen des Dokuments %1.'");
		EndIf;
		
		MessageText = StringFunctionsClientServer.SubstituteParametersToString(
			StringPattern,
			String(SalesInvoiceObject));
		
		CommonClientServer.MessageToUser(MessageText);
		
	EndTry;
	
EndProcedure

#EndRegion

#EndIf
